# vim:foldmethod=marker

# {{{ misc
snippet "sout" "System.out.println(...);" rbA
System.out.println($0);
endsnippet

snippet read "String ... = br.readLine()"
String ${0:str} = br.readLine();
endsnippet

snippet readint "int ... = Integer.parseInt(br.readLine())"
int ${0:n} = Integer.parseInt(br.readLine());
endsnippet

snippet readints "int[] input = ..."
Pattern p = Pattern.compile(" ");
String[] ${2:strInput} = p.split(in.readLine());
int[] ${3:input} = new int[$2.length];
for (int i = 0; i < $2.length; i++) {
	$3[i] = Integer.parseInt($2[i]);
}
endsnippet

snippet strrep "new String(...)"
new String(new char[${1:1}]).replace("\0", "${0:repeat}")
endsnippet
# }}}

# {{{ language constructs
# {{{ if statements
snippet if "if (...) { ... }"
if ($1) {
	$0
}
endsnippet

snippet ifp "if (...) { ... } ..."
if ($1) {
	$2
} $0
endsnippet

snippet elif "else if (...) { ... }"
else if ($1) {
	$0
}
endsnippet

snippet elifp "else if (...) { ... } ..."
else if ($1) {
	$2
} $0
endsnippet

snippet else "else { ... }"
else {
	$0
}
endsnippet
# }}}

# {{{ for loops
snippet forn "for (int i = 0; i < ...; i++) { ... }"
for (int i = 0; i < $1; i++) {
	$0
}
endsnippet

snippet fori "for (int ...) { ... }"
for (int ${1:i} = ${2:0}; $1 $3; $1${4:++}) {
	$0
}
endsnippet

snippet foreach "for (... : ...) { ... }"
for (${1:item} : ${2:list}) {
	$0
}
endsnippet
# }}}
# }}}

# {{{ main method
snippet main "public static void main ..."
public static void main(String[] args) {
	$0
}
endsnippet

snippet emain "public static void main ..."
public static void main(String[] args) throws ${1:Exception} {
	$0
}
endsnippet
# }}}

# {{{ class with BufferedReader and main method
# r for reader
snippet rclass "class ... BufferedReader br = ..."
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class `!p snip.rv = snip.basename` {
	public static void main(String[] args) throws Exception {
		final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		$0
	}
}
endsnippet
# }}}

# {{{ classes
snippet class "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` {
	$0
}
endsnippet

# extends
snippet eclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` extends ${3:superclass} {
	$0
}
endsnippet

# implements
snippet iclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` implements ${2:interface} {
	$0
}
endsnippet

# extends + implements
snippet eiclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` extends ${2:superclass} implements ${3:interface} {
	$0
}
endsnippet
# }}}

# {{{ parameterized classes
snippet tclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> {
	$0
}
endsnippet

# extends
snippet etclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> extends ${3:superclass} {
	$0
}
endsnippet

# implements
snippet itclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> implements ${3:interface} {
	$0
}
endsnippet

# extends + implements
snippet eitclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> extends ${3:superclass} implements ${4:interface} {
	$0
}
endsnippet
# }}}
